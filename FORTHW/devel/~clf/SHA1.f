: 3DROP DROP 2DROP ;


\ Œ“: 	JZAKIYA
\ ƒ¿“¿:		—¡. 4 ÕŒﬂ¡. 2000 00:00
\ ›À≈ “–ŒÕÕ¿ﬂ œŒ◊“¿: 		JZAK...@MAIL.COM
\ √–”œœ€: 		COMP.LANG.FORTH

\ HERE IS ANS FORTH CODE FOR THE SECURE HASH ALGORITHM.

\ JABARI ZAKIYA
\ -----------------------------------------------------
\ ANS FORTH IMPLEMENTATION OF THE SECURE HASH ALGORITHM SHA-1
\ SEE FIPS PUB 180-1 -- WWW.ITL.NIST.GOV/FIPSPUBS/FIP180-1.HTM
\ SHA-1 REQUIRED FOR DIGITAL SIGNATURE ALGORITHM (DSA) AND THE
\ DIGITAL SIGNATURE STANDARD (DSS) AND SECURE FEDERAL HASH APPLICATIONS.
\ ASSUMES LITTLE ENDIAN, BYTE ADDRESSABLE CPU, E.G. PENTIUM CLASS
\ DEPENDENCIES: CORE EXT WORDSET
\ PERMISSION FOR USE OF THIS CODE IS FREE
\ SUBJECT TO ACKNOWLEDGMENT OF COPYRIGHT.
\ COPYRIGHT (C) 2000 JABARI ZAKIYA -- JZAK...@MAIL.COM  7/1/2000

  DECIMAL
  32 CONSTANT CELLSIZE    \ CPU BITSIZE

  CREATE MCOUNT  2 CELLS ALLOT   \ HOLDS MESSAGE BITS COUNT 0 - <2^64
  CREATE SHAVAL  5 CELLS ALLOT   \ HOLDS HASH VALUE AFTER EACH MESSAGE
  CREATE SHASH  85 CELLS ALLOT   \ FULLY EXTENDED HASH ARRAY
  CREATE W      80 CELLS ALLOT   \ FULLY EXTENDED MESSAGE ARRAY

  HEX

    5A827999  CONSTANT  K1   \ CONSTANT FOR ROUNDS  0 - 19
    6ED9EBA1  CONSTANT  K2   \ CONSTANT FOR ROUNDS 20 - 39
    8F1BBCDC  CONSTANT  K3   \ CONSTANT FOR ROUNDS 40 - 59
    CA62C1D6  CONSTANT  K4   \ CONSTANT FOR ROUNDS 60 - 79

  DECIMAL

\ CREATE WORDS AND PHRASES TO PRODUCE OPTIMIZED INLINE COMPILED CODE
  0 VALUE  LITVAL
: ]L  S" TO LITVAL LITVAL ] LITERAL " EVALUATE ; IMMEDIATE

  0 VALUE H[E]  \ POINTER TO ARRAY ADDR OF HASH VALUE E FOR EACH ROUND

: H[C] ( - ADR[C] )  S" H[E]  [ 2 CELLS ]L  +"  EVALUATE  ;  IMMEDIATE
: H[B] ( - ADR[B] )  S" H[E]  [ 3 CELLS ]L  +"  EVALUATE  ;  IMMEDIATE
: ROL  ( N #  -  U)  2DUP  LSHIFT  -ROT CELLSIZE  -  NEGATE RSHIFT OR ;

: INITHASH ( -)  \ LOAD INITIAL HASH VALUES H0 - H4
  [ HEX ] 67452301 ( H0)  EFCDAB89 ( H1)  98BADCFE ( H2)
          10325476 ( H3)  C3D2E1F0 ( H4)  [ DECIMAL ]
  SHASH  4 0 DO TUCK ! CELL+ LOOP !  \ STORE INITIAL HASH IN SHASH ARRAY
  SHASH  SHAVAL  5 CELLS  MOVE       \ STORE COPY IN SHAVAL ARRAY
  SHASH  TO  H[E]                    \ INIT POINTER TO LAST HASH VALUE
;

: UPDATEHASH ( -)  \ COMPUTE HASH, UPDATE HASH ARRAYS WITH NEW VALUES
  SHASH  SHAVAL  H[E]                 \ PLACE ARRAY ADDRESSES ON STACK
  5 0 DO DUP >R @ SWAP DUP >R @ + DUP \ COMPUTE UPDATED HASH SUBVALUE
  R@ ! OVER ! CELL+ R> CELL+ R> CELL+ \ STORE UPDATED HASH SUBVALUE
  LOOP  3DROP                         \ CLEAR STACK WHEN DONE
  SHASH  TO  H[E]                     \ INIT POINTER TO LAST SUBVALUE
;

: WEXPAND ( -)  \ CREATE FULLY EXPANDED SUBKEY ARRAY
  [ W 16 CELLS + ]L                           \ START AT W[16]
  64 0 DO DUP >R [  3 CELLS ]L - @            \ W[T-3] R:W[T]
          R@     [  8 CELLS ]L - @ XOR        \ W[T-3]^W[T-8]
          R@     [ 14 CELLS ]L - @ XOR        \ W'^W[T-14]
          R@     [ 16 CELLS ]L - @ XOR 1 ROL  \ (W"^W[T-16]<<1)
          R>  TUCK  !  CELL+                  \ W[T+1] R:-- ;W[T]=WNEW
  LOOP  DROP                                  \ --
;

: F2 ( - N)  \ N = B XOR C XOR D
  H[C] DUP  CELL-  @ ( D)  SWAP  2@ ( B C)  XOR  XOR  \ B^C^D
;

: F1 ( - N)  \ N = (B AND C) OR (~B AND D)
  H[C]  DUP  CELL-  SWAP  2@    \ H[D] B C
  OVER  AND  SWAP  INVERT       \ H[D] (B*C) ~B
  ROT  @  AND  OR               \ (B*C)|(~B*D)
;

: F3 ( - N)  \ N = (B AND C) OR (B AND D) OR (C AND D)
  H[C]  DUP  2@  OVER  >R  AND  \ H[C]  (B*C)           R:B
  SWAP  CELL-  2@  DUP >R  AND  \ (B*C) (C*D)           R:B D
  2R>  AND  OR  OR              \ (B*C)|(C*D)|(B*D)     R:--
;

: HASHADJUST ( A' -)  \ ADJUST HASH ARRAY FOR NEXT ROUND
  H[B]  DUP  @  30 ROL  SWAP  ! \ A'     ;B = S(B,30) = ROL(B,30)
  H[E]  CELL+  DUP  TO  H[E]    \ A' [E] ;H[E] POINTS TO FORMER H[D]
  [ 4 CELLS ]L  +  !            \ --     ;A IN NEW TOP OF HASH ADDRESS
;

: RNDS1 ( [WI] -  [WI]')  \ PERFORM HASH ALGORITHM FOR ROUNDS  0 - 19
  20 0 DO  DUP  @                       \ [WI] WI
           H[E]  DUP  @                 \ [WI] WI (E) E
           SWAP  [ 4 CELLS ]L  +  @     \ [WI] WI E A
           5 ROL  +  +  K1  +  F1  +    \ [WI] WI+E+S(A,5)+K1+F1
           HASHADJUST                   \ [WI]
           CELL+                        \ [WI]'
  LOOP
;

: RNDS2 ( [WI] -  [WI]')  \ PERFORM HASH ALGORITHM FOR ROUNDS 20 - 39
  20 0 DO  DUP  @                       \ [WI] WI
           H[E]  DUP  @                 \ [WI] WI (E) E
           SWAP  [ 4 CELLS ]L  +  @     \ [WI] WI E A
           5 ROL  +  +  K2  +  F2  +    \ [WI] WI+E+S(A,5)+K2+F2
           HASHADJUST                   \ [WI]
           CELL+                        \ [WI]'
  LOOP
;

: RNDS3 ( [WI] -  [WI]')  \ PERFORM HASH ALGORITHM FOR ROUNDS 40 - 59
  20 0 DO  DUP  @                       \ [WI] WI
           H[E]  DUP  @                 \ [WI] WI (E) E
           SWAP  [ 4 CELLS ]L  +  @     \ [WI] WI E A
           5 ROL  +  +  K3  +  F3  +    \ [WI] WI+E+S(A,5)+K3+F3
           HASHADJUST                   \ [WI]
           CELL+                        \ [WI]'
  LOOP
;

: RNDS4 ( [WI] -  [WI]')  \ PERFORM HASH ALGORITHM FOR ROUNDS 60 - 79
  20 0 DO  DUP  @                       \ [WI] WI
           H[E]  DUP  @                 \ [WI] WI (E) E
           SWAP  [ 4 CELLS ]L  +  @     \ [WI] WI E A
           5 ROL  +  +  K4  +  F2  +    \ [WI] WI+E+S(A,5)+K4+F2
           HASHADJUST                   \ [WI]
           CELL+                        \ [WI]'
  LOOP
;

: SHA1 ( -)  \ CREATE 160-BIT SHA-1 HASH OF 512-BIT MESSAGE IN W ARRAY
  WEXPAND                         \ EXPAND MESSAGE CURRENTLY IN W ARRAY
  W RNDS1 RNDS2 RNDS3 RNDS4 DROP  \ DO SHA-1 ALG, CREATE H[A]--H[E]
  UPDATEHASH                      \ COMPUTE AND UPDATE HASH VALUES
;

: INITCOUNT  ( -)  0  0  MCOUNT  2!  ;  \ SET MESSAGE BIT COUNT TO ZERO

: COUNTUPDATE ( D -)  MCOUNT  2@  D+  MCOUNT  2!  ;

: COUNTSTORE  ( -)  MCOUNT  2@  [ W  14 CELLS  + ]L  2!  ;

\ DISPLAY SHA-1 HASH VALUE IN HEX ( A B C D E)
: HASH. CR  HEX
  [ SHAVAL 4 CELLS + ]L  5 0 DO  DUP  @  U.  CELL-  LOOP  DROP  DECIMAL

;

\ LOAD W ARRAY WITH DATA ON STACK
: WLOAD ( D0..D15 - ) [ W 15 CELLS + ]L 16 0 DO TUCK ! CELL- LOOP DROP ;

\ ---------------------------------------------------------------------
\ EXAMPLE 1: FROM FIPS PUB 180-1
\ MESSAGE: ASCII STRING 'ABC'
\ HASH = A9993E36  4706816A  BA3E2571  7850C26C  9CD0D89D

\ LOAD MESSAGE BLOCK WITH ASCII STRING 'ABC' (616263H)
: EX1A  [ HEX ]  61626380 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18  WLOAD ;

\ COMPUTE/DISPLAY HASH FOR ASCII STRING 'ABC'
: EX1  INITHASH  EX1A  SHA1  HASH.  ;
\ ---------------------------------------------------------------------
\ EXAMPLE 2: FROM FIPS PUB 180-1
\ MESSAGE: 'ABCDBCDECDEFDEFGEFGHFGHIGHIJHIJKIJKLJKLMKLMNLMNOMNOPNOPQ'
\ HASH = 84983E44  1C3BD26E  BAAE4AA1  F95129E5  E54670F1

: EX2A \ LOAD 'ABCDBCDECDEFDEFGEFGHFGHIGHIJHIJKIJKLJKLMKLMNLMNOMNOPNOPQ'
  [ HEX ]   61626364  62636465  63646566  64656667  65666768  66676869
  6768696A  68696A6B  696A6B6C  6A6B6C6D  6B6C6D6E  6C6D6E6F  6D6E6F70
  6E6F7071  80000000  0  WLOAD
;

: EX2B  \ LOAD SECOND BLOCK FOR MESSAGE STRING
  [ HEX ]  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1C0  WLOAD
;

\ DO HASH FOR 'ABCDBCDECDEFDEFGEFGHFGHIGHIJHIJKIJKLJKLMKLMNLMNOMNOPNOPQ'
: EX2   INITHASH  EX2A  SHA1  EX2B  SHA1  HASH.  ;
\ ---------------------------------------------------------------------
\ EXAMPLE 3: FROM FIPS PUB 180-1
\ MESSAGE: STRING OF 1 MILLION COPIES OF 'A' (61H), (8 MILLION BITS)
\ HASH = 34AA973C  D4C4DAA4  F61EEB2B  DBAD2731  6534016F

: EX3A \ LOAD MESSAGE BLOCK WITH ALL 'A' (61H), MUST HASH 15,625 TIMES
  [ HEX ] 61616161 ( 'AAAA') [ DECIMAL ] W 16 0 DO 2DUP ! CELL+ LOOP
  2DROP
;

: EX3B  \ LOAD LAST BLOCK: FIRST BIT TO '1' AND BIT-COUNT TO 8 MILLION
  [ HEX ]  80000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7A1200  WLOAD
;

\ COMPUTE/DISPLAY HASH FOR 1 MILLION COPIES OF ASCII 'A' (61H)
: EX3  [ DECIMAL ] INITHASH  EX3A  15625  0 DO  SHA1  LOOP
  EX3B  SHA1  HASH.
; 
