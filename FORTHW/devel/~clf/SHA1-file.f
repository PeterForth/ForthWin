REQUIRE [IF]    lib/include/tools.f 
REQUIRE MARKER  lib/include/core-ext.f 
REQUIRE /STRING lib/include/string.f 
: 3DROP 2DROP DROP ;

\ COMP.LANG.FORTH    > SHA-1 FILE HASHER
\ ÎÒ:		JZAKIYA - ÏÐÎÑÌÎÒÐ ÏÐÎÔÈËß
\ ÄÀÒÀ:		ÂÒ. 16 ßÍÂ. 2001 11:48
\ ÝËÅÊÒÐÎÍÍÀß ÏÎ×ÒÀ: 		JZAK...@MAIL.COM

0 [IF]

THIS IS AND ANS FORTH  SECURE HASH ALGORITHM FILE HASHER.
SHAFILE WILL REQUEST THE NAME OF A FILE TO SHA-1 HASH.
IF YOU PUT IN AN INVALID FILE YOU WILL BE TOLD SO AND ASKED
TO TRY AGAIN. HIT N|N TO NOT TRY AGAIN, OTHER KEYS FOR YES.
IT DISPLAYS THE FILES DATASIZE IN BYTES.
IT DECREMENTS A FILE'S BYTECOUNT BY 2 TO PREVENT HASHING
THE CR|LF PAIR THAT END ASCII FILES.  YOU CAN EASILY
CHANGE THIS TO WORK WITH ANY PARTICULAR FILE CHARACTERISTICS.

JABARI ZAKIYA

[THEN]

\ ANS FORTH IMPLEMENTATIOON OF SECURE HASH ALGORITHM (SHA-1)
\ SPEC IN FIPS PUB 180-1 -- WWW.ITL.NIST.GOV/FIPSPUBS/FIP180-1.HTM
\ SHA-1 REQUIRED FOR THE DIGITAL SIGNATURE ALGORITHM (DSA) AND THE
\ DIGITAL SIGNATURE STANDARD (DSS) AND ALL SECURE FEDERAL HASH APPS.
\ ASSUMES LITTLE ENDIAN, BYTE ADDRESSABLE CPU, E.G. PENTIUM CLASS.
\ DEPENDENCIES: CORE EXT WORDSET ; COMMON USAGE -ROT 3DROP CELL-
\ USE OF THIS CODE IS FREE SUBJECT TO ACKNOWLEDGMENT OF COPYRIGHT.
\ COPYRIGHT (C) 2001 JABARI ZAKIYA -- JZAK...@MAIL.COM  1/16/2001

\ ===============================================================
\ MACRO WORDSET FROM WIL BADEN'S TOOL BELT SERIES IN
\ FORTH DIMENSIONS (FD) VOL. 19, NO. 2, JULY/AUGUST 1997
\ ORIGINAL CODE HAS BEEN MODIFIED TO MAKE MORE EFFICIENT
\ MACRO ALLOWS INSERTION OF PARAMETERS FOLLOWING THE MACRO
\ "\" REPRESENTS PLACE WHERE PARAMETER IS INSERTED
\ EXAMPLE:  MACRO  ??  " IF  \  THEN "
\ : FOO .. ?? EXIT .... ;  ?? COMPILES TO -- IF EXIT THEN

\ PLACE AND STRING FOR SYSTEM IF NEEDED
\ NOT NEEDED FOR SWIFTFORTH V 2.00.3, NEEDED FOR WIN32FORTH V 4.10
: PLACE  ( CADDR N ADDR -)  2DUP  C!  CHAR+  SWAP  CHARS  MOVE ;
: STRING ( CHAR "CCC" -) WORD COUNT HERE OVER 1+ CHARS ALLOT PLACE ;

\ VERSIONS OF /STRING AND ANEW IF SYSTEM DOESN'T HAVE THEM
\ : /STRING ( A N K - A+K N-K) ( OVER MIN) TUCK - >R CHARS + R> ;
: ANEW  >IN @ BL WORD FIND IF EXECUTE ELSE DROP THEN >IN ! MARKER ;

: SPLIT-AT-CHAR  ( A  N  CHAR  -  A  K  A+K  N-K)
  >R  2DUP
  BEGIN  DUP  WHILE  OVER  C@  R@  -
  WHILE  1 /STRING  REPEAT  THEN
  R> DROP  TUCK  2>R  -  2R>
;
: DOES>MACRO    \ COMPILE THE MACRO, INCLUDING EXTERNAL PARAMETERS
  DOES> COUNT BEGIN [CHAR]  \ SPLIT-AT-CHAR  2>R  EVALUATE  R@
              WHILE BL WORD COUNT EVALUATE 2R>  1 /STRING REPEAT
              2R>  2DROP
;

\ MACRO CREATION WORD WHICH ALLOWS PARAMETER INSERTION
: MACRO  CREATE  IMMEDIATE  CHAR  STRING  DOES>MACRO  ;

\ =====================  START SHA-1 CODE =====================

  DECIMAL
  32 CONSTANT CELLSIZE    \ CPU BITSIZE

  CREATE SHAVAL  5 CELLS ALLOT   \ HOLDS HASH AFTER EACH BLOCK
  CREATE SHASH  85 CELLS ALLOT   \ FULLY EXTENDED HASH ARRAY
  CREATE W      16 CELLS ALLOT   \ HOLDS MESSAGE BLOCK

  HEX

    5A827999  CONSTANT  K1   \ CONSTANT FOR ROUNDS  0 - 19
    6ED9EBA1  CONSTANT  K2   \ CONSTANT FOR ROUNDS 20 - 39
    8F1BBCDC  CONSTANT  K3   \ CONSTANT FOR ROUNDS 40 - 59
    CA62C1D6  CONSTANT  K4   \ CONSTANT FOR ROUNDS 60 - 79

  DECIMAL
  0 VALUE  LITVAL
: ]L  S" TO LITVAL LITVAL ] LITERAL " EVALUATE ; IMMEDIATE

  1 W !     \ FOR ENDIAN TESTING
  W C@ [IF] \ IF LITTLE ENDIAN CPU
: ENDIAN@  ( A1 - N1 )  S" @ " EVALUATE ; IMMEDIATE
: ENDIAN!  ( N A1 -- )  S" ! " EVALUATE ; IMMEDIATE

  [ELSE] \ BIG ENDIAN CPUS (E.G. MACS)
: ENDIAN@  ( A1 -- N1 )
  DUP >R  3  +  C@  8 LSHIFT R@  2  +  C@  +  8 LSHIFT
  R@  1+  C@  +  8 LSHIFT  R>  C@  +
;

: ENDIAN!  ( N1 A1 - )
  >R  256 /MOD  SWAP  R@  C!  256 /MOD  SWAP  R@  1+  C!
  256 /MOD  SWAP  R@  2  +  C!  R>  3  +  C!
;
  [THEN]

  0 VALUE H[E]  \ POINTER TO ADDR OF HASH VALUE E FOR EACH ROUND

MACRO H[D] " H[E]  [ 1 CELLS ]L  +"  \ RETURN D ADR
MACRO H[C] " H[E]  [ 2 CELLS ]L  +"  \ RETURN C ADR
MACRO H[B] " H[E]  [ 3 CELLS ]L  +"  \ RETURN B ADR
MACRO ROL  " DUP [ CELLSIZE \ TUCK - ]L RSHIFT SWAP LITERAL LSHIFT OR "

: SHAINIT ( -)  \ LOAD INITIAL HASH VALUES H0 - H4
  [ HEX ] 67452301 ( H0)  EFCDAB89 ( H1)  98BADCFE ( H2)
          10325476 ( H3)  C3D2E1F0 ( H4)  [ DECIMAL ]
  SHASH  4 0 DO  TUCK  !  CELL+  LOOP  !
  SHASH  SHAVAL  5 CELLS  MOVE   SHASH  TO  H[E]
;

: UPDATEHASH ( -)  \ COMPUTE|UPDATE HASH ARRAYS WITH NEW VALUES
  SHASH  SHAVAL  H[E]
  5 0 DO  DUP >R   @   SWAP  DUP >R  @  +  DUP
          R@  !  OVER  !  CELL+  R>  CELL+  R>  CELL+
  LOOP  3DROP
  SHASH  TO  H[E]
;

\ PUT TWO COPIES OF ORIGINAL WI ON STACK, KEEP ITS ADDRESS
: WI@  ( [WI] - WI [WI] WI)  S" DUP  @  TUCK" EVALUATE  ; IMMEDIATE

: WI ( ..WI -..WI' WI')  \ CREATE 2 COPIES OF NEW WI' FROM WI ON STACK
  15 PICK  14 PICK  XOR  8 PICK  XOR  3 PICK  XOR  ROL 1  DUP
;

: WIDROP ( W0..W79 - )  10 0 DO  2DROP 2DROP  2DROP 2DROP  LOOP  ;

: F2 ( - N)  \ N = B XOR C XOR D
  H[D] DUP >R  CELL+  2@ ( B C) XOR  R> @ XOR  \ B^C^D
;
: F1 ( - N)  \ N = (B AND C) OR (~B AND D)
  H[C] 2@  OVER  AND  SWAP  INVERT   \ (B&C) ~B
  H[D]  @  AND  OR                   \ (B&C)|(~B&D)
;

: F3 ( - N)  \ N = (B AND C) OR (B AND D) OR (C AND D)
  H[D]  DUP >R  CELL+  2@        \ B C                 R:H[D]
  OVER  AND  SWAP  R@ @  AND OR  \ (B&C)|(B&D)
  R> 2@ AND  OR                  \ (B&C)|(B&D)|(C&D)   R:--
;

: HASHADJUST ( A' -)  \ ADJUST HASH ARRAY FOR NEXT ROUND
  H[B]  DUP  @  ROL 30  SWAP  ! \ A'     ;B = S(B,30) = ROL(B,30)
  H[E]  CELL+  DUP  TO  H[E]    \ A' [E] ;H[E] POINTS TO FORMER H[D]
  [ 4 CELLS ]L  +  !            \ --     ;NEW A TO NEW TOP OF HASH ARRAY
;

: RNDS1 ( [W0] -  W0..W19) \ DO HASH ALGORITHM FOR ROUNDS  0 - 19
  16 0 DO  WI@                          \ ..WI [WI] WI
           H[E]  DUP  >R                \ ..WI [WI] WI (E)
           [ 4 CELLS ]L  +  @  ROL 5 +  \ ..WI [WI] WI+S(A,5)
           R>  @  +  K1  +  F1  +       \ ..WI [WI] WI+S(A,5)+E+K1+F1
           HASHADJUST                   \ . WI [WI]
           CELL+                        \ ..WI [WI]'
  LOOP     DROP                         \ W0..W15   ;ORIGINAL BLOCK
   4 0 DO  WI                           \ ..WI WI
           H[E]  DUP  >R                \ ..WI WI (E)
           [ 4 CELLS ]L  +  @  ROL 5 +  \ ..WI WI+S(A,5)
           R>  @  +  K1  +  F1  +       \ ..WI WI+S(A,5)+E+K1+F1
           HASHADJUST                   \ ..WI
  LOOP                                  \ ..W19
;

: RNDS2 ( ..W19 - ..W39)   \ DO HASH ALGORITHM FOR ROUNDS 20 - 39
  20 0 DO  WI                           \ ..WI WI
           H[E]  DUP  >R                \ ..WI WI (E)
           [ 4 CELLS ]L  +  @  ROL 5 +  \ ..WI WI+S(A,5)
           R>  @  +  K2  +  F2  +       \ ..WI WI+S(A,5)+E+K2+F2
           HASHADJUST                   \ ..WI
  LOOP                                  \ ..W39
;
: RNDS3 ( ..W39 - ..W59)   \ DO HASH ALGORITHM FOR ROUNDS 40 - 59
  20 0 DO  WI                           \ ..WI WI
           H[E]  DUP  >R                \ ..WI WI (E)
           [ 4 CELLS ]L  +  @  ROL 5 +  \ ..WI WI+S(A,5)
           R>  @  +  K3  +  F3  +       \ ..WI WI+S(A,5)+E+K3+F3
           HASHADJUST                   \ ..WI
  LOOP                                  \ ..W59
;
: RNDS4 ( ..W59 - ..W79)   \ DO HASH ALGORITHM FOR ROUNDS 60 - 79
  20 0 DO  WI                           \ ..WI WI
           H[E]  DUP  >R                \ ..WI WI (E)
           [ 4 CELLS ]L  +  @  ROL 5 +  \ ..WI WI+S(A,5)
           R>  @  +  K4  +  F2  +       \ ..WI WI+S(A,5)+E+K2+F2
           HASHADJUST                   \ ..WI
  LOOP                                  \ ..W79
;

: SHA1 ( -)  \ COMPUTE 160-BIT SHA-1 HASH OF 512-BIT MESSAGE BLOCK
  W  RNDS1  RNDS2  RNDS3  RNDS4  WIDROP \ DO SHA-1, CREATE H[A]-H[E]
  UPDATEHASH                            \ COMPUTE|UPDATE HASH VALUES
;

\ DISPLAY SHA-1 HASH VALUE IN HEX ( E D C B A )
: HASH. CR  HEX  [ SHAVAL 4 CELLS + ]L
  5 0 DO  DUP  @  U.  CELL-  LOOP  DROP   DECIMAL
;

\ LOAD W ARRAY WITH DATA ON STACK
: WLOAD ( D0..D15 -- )  [ W 15 CELLS + ]L
  16 0 DO  TUCK  !  CELL-  LOOP  DROP
;

\ -------------------------------------------------------------
\ EXAMPLE 1: FROM FIPS PUB 180-1
\ MESSAGE: ASCII STRING 'ABC'
\ HASH = A9993E36  4706816A  BA3E2571  7850C26C  9CD0D89D

  HEX
\ LOAD MESSAGE BLOCK WITH ASCII STRING 'ABC' (616263H)
: EX1A  61626380 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 WLOAD ;

\ COMPUTE/DISPLAY HASH FOR ASCII STRING 'ABC'
: EX1  SHAINIT  EX1A  SHA1  HASH.  ;

\ -------------------------------------------------------------
\ EXAMPLE 2: FROM FIPS PUB 180-1
\ MESSAGE:'ABCDBCDECDEFDEFGEFGHFGHIGHIJHIJKIJKLJKLMKLMNLMNOMNOPNOPQ'
\ HASH = 84983E44  1C3BD26E  BAAE4AA1  F95129E5  E54670F1

\ LOAD 'ABCDBCDECDEFDEFGEFGHFGHIGHIJHIJKIJKLJKLMKLMNLMNOMNOPNOPQ'
: EX2A  61626364  62636465  63646566  64656667  65666768  66676869
        6768696A  68696A6B  696A6B6C  6A6B6C6D  6B6C6D6E  6C6D6E6F
        6D6E6F70  6E6F7071  80000000  0  WLOAD
;
 \ LOAD SECOND BLOCK FOR MESSAGE STRING
: EX2B  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1C0  WLOAD  ;

\ HASH 'ABCDBCDECDEFDEFGEFGHFGHIGHIJHIJKIJKLJKLMKLMNLMNOMNOPNOPQ'
: EX2  SHAINIT  EX2A  SHA1  EX2B  SHA1  HASH.  ;

\ -------------------------------------------------------------
\ EXAMPLE 3: FROM FIPS PUB 180-1
\ MESSAGE: 1 MILLION COPIES OF 'A' (61H), (8 MILLION BITS)
\ HASH = 34AA973C  D4C4DAA4  F61EEB2B  DBAD2731  6534016F

: EX3A \ LOAD BLOCK OF ALL 'A'S (61H), MUST HASH 15,625 TIMES
  [ HEX ]  61616161  ( 'AAAA')
  [ DECIMAL ]  W  16 0 DO  2DUP  !  CELL+  LOOP  2DROP
;

  HEX
\ LAST MESSAGE BLOCK: 1ST BIT A '1', BIT-COUNT = 8 MILLION
: EX3B  80000000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7A1200 WLOAD ;
  DECIMAL
\ DO HASH FOR MESSAGE OF 1 MILLION COPIES OF ASCII 'A' (61H)
: EX3  SHAINIT  EX3A  15625 0 DO SHA1 LOOP EX3B SHA1 HASH. ;

\ ===============  HASH STRING DISPLAY WORDSET  ===============
  DECIMAL
CREATE DIGIT$  \ ARRAY OF DIGITS 0123456789ABCDEF
  48 C, 49 C, 50 C, 51 C, 52 C, 53 C, 54 C, 55 C, 56 C, 57 C,
  97 C, 98 C, 99 C, 100 C, 101 C, 102 C,

: INTDIGITS ( -- )  0 PAD ! ;
: SAVEDIGIT ( N -- )  PAD C@ 1+ DUP PAD C! PAD + C! ;
: BYTEDIGITS ( N1 -- )
  DUP 4 RSHIFT DIGIT$ + C@ SAVEDIGIT 15 AND DIGIT$ + C@ SAVEDIGIT
;

  W C@ [IF] \ LITTLE ENDIAN
: CELLDIGITS ( A1 -- )  DUP 3 + DO I C@ BYTEDIGITS -1  +LOOP ;
 [ELSE]
: CELLDIGITS ( A1 -- )  DUP 4 + SWAP DO I C@ BYTEDIGITS LOOP ;
 [THEN]

: SHASTRING ( -- ADR COUNT )  \ RETURN COUNTED SHA STRING ARRAY
  INTDIGITS  [ SHAVAL 4 CELLS + ]L
  5 0 DO  DUP  CELLDIGITS  CELL-  LOOP  DROP  PAD  COUNT
;

\ ====================  FILE HASH WORDSET  ====================

  VARIABLE  RFILEID     \ HOLDS FILEID NUMBER OF INPUT FILE

: INPUTFILENAME  ( -- IOR)
  CR  CR  ." FILENAME: "  PAD  DUP  80  ACCEPT ( ADR #)
  2DUP + 0 SWAP C!
  R/O  OPEN-FILE  SWAP  RFILEID !  ( IOR)
;

: TRYAGAIN?  ( -- ?)
  CR  CR ." INVALID IPUT FILE, TRY AGAIN? (Y/N)"
  KEY  DUP  EMIT  DUP [CHAR] N =  SWAP [CHAR] N = OR
;

\ READ N BYTES FROM INPUT FILE, STORE AT ADDR ARRAY
: BYTES@  ( ADR N - )  RFILEID @  READ-FILE  2DROP ;

: STORELEN  ( LO HI - )
  D2*  D2*  D2*  [ W 56 + ]L !  [ W 60 + ]L !
;

: GETPARTIAL ( CNT -- W  CNT2 ?)
  W  2DUP  SWAP  DUP >R  BYTES@        ( CNT1 ADR1  )
  + 128 OVER C! CHAR+ 55 R@ - R> 55 >  ( ADR2 CNT2 ?)
;

: REVERSECELL ( N -- X )
  3 0 DO  DUP  255  AND  SWAP  8 RSHIFT  LOOP
  SWAP  8 LSHIFT OR  SWAP 16 LSHIFT OR  SWAP 24 LSHIFT OR
;

: CELLSREVERSE  ( ADR N -- )
  0 DO  DUP  @  REVERSECELL  OVER !  CELL+  LOOP  DROP
;

MACRO BLOCK@     " W  64  BYTES@ "
MACRO SHA1TRANS  " W  \   CELLSREVERSE SHA1"

: SHAFILE ( -- )
  BEGIN  INPUTFILENAME  ( IOR)          \ ENTER FILENAME
  WHILE  TRYAGAIN? IF  EXIT  THEN       \ NOT VALID, TRY (NOT) AGAIN
  REPEAT SHAINIT                        \ VALID FILE, INIT TRANSFORM
  RFILEID @  FILE-SIZE  DROP  ( UD )    \ GET BYTESIZE OF INPUT FILE
  2 0  D-                               \ DEC CNT BY 2 FOR CR|LF EOF
  CR ." BYTESIZE: " 2DUP  D.            \ DISPLAY FILESIZE TO SCREEN
  2DUP  2>R                             \ SAVE MESSAGE CNT ON RETURN
  64  UM/MOD  ( REMBYTES NBLOCKS )      \ COMPUTE NBLOCKS & REMBYTES
  0 ?DO  BLOCK@  SHA1TRANS 16  LOOP     \ DO N FULL BLOCKS
  ( REMBYTES)  GETPARTIAL ( ADR CNT ?)  \ READ REMAINING BYTES
  IF 8 + 0 FILL SHA1TRANS 16 W 56 THEN  \ DO IF REMBYTES > 55
  0 FILL  2R> STORELEN  SHA1TRANS 14    \ DO LAST BLOCK
  CR  ." SHA HASH: " SHASTRING TYPE CR  \ SHOW MD5 HASH FOR FILE
  RFILEID @  CLOSE-FILE  DROP           \ CLOSE THE INPUT FILE
;
